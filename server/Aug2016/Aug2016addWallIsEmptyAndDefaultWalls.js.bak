var insertWall = function(wall) {
  check(wall,{
    activityID: Match.idString,
    createdFor: Match.idString, //must = siteID if teacher wall (only one Site object, so only one id possible)
                                //userID of a student if student wall
                                //id of a group if group wall
                                //id of a section if section wall
    type: Match.OneOf('teacher','student','group','section'),
    /* set below, value not passed in
    access: Match.Optional([Match.idString])    // [studentID] | [groupMemberIDs] | [sectionMemberIDs]
    wallType: wall.type, //denormalized value for ease of publication functions
    unitID: activity.unitID,
    visible: activity.wallVisible[wall.type],
    wallIsEmpty: true,
    wallVisible: wall.Visible, //denormalized value for ease of publication functions
    order: activity.wallOrder.indexOf(wall.type);
    */
  });
  //var cU = Meteor.user();
  //if (!cU)  
  //  throw new Meteor.Error('notLoggedIn', "You must be logged in to create a new wall.");
  //troubles here when creating default walls for a parent???
  //if (!Roles.userIsInRole(cU,['teacher','student']))
  //  throw new Meteor.Error('onlyTeachersAndStudentsAllowed', "Only teachers or students can add a wall to an activity.");

  var activity = Activities.findOne(wall.activityID);
  if (!activity)
    throw new Meteor.Error('activity-not-found',"Cannot add wall, invalid activityID.");
  wall.unitID = activity.unitID;
  wall.order = activity.wallOrder.indexOf(wall.type);
  wall.wallType = wall.type; //denormalized for ease of publication functions
  wall.visible = activity.wallVisible[wall.type];
  wall.wallIsEmpty = true;
  wall.wallVisible = wall.visible; //denormalizing for ease of publication functions

  //validate createdFor collection and specific item 
  if (wall.type == 'student') {
    var student = Meteor.users.findOne(wall.createdFor);
    if (!Roles.userIsInRole(student,'student'))
      throw new Meteor.Error('notStudent','Could not create student wall.  Assigned user is not a student.');
    wall.access = [student._id];
  } else if (wall.type == 'group') {
    var group = Groups.findOne(wall.createdFor);
    if (!group)
      throw new Meteor.Error('group-not-found','Could not create group wall.  Group not found.');
    wall.access = Meteor.groupMemberIds('current,final',group._id);
  } else if (wall.type == 'section') {
    var section = Sections.findOne(wall.createdFor);
    if (!section)
      throw new Meteor.Error('section-not-found','Could not create section wall.  Section not found.');
    wall.access = Meteor.sectionMemberIds(section._id);      
  } else if (wall.type == 'teacher') {
    var site = Site.findOne(wall.createdFor);
    if (!site)
      throw new Meteor.Error('site-not-found','Could not create teacher wall.  Site not found.');        
    wall.access = [site._id]; 
  } else {
    throw new Meteor.Error('owner-not-found','Error creating wall.  Owner (student,group, section or site) not found.');      
  }

  return Walls.insert(wall , function( error, _id) { 
    if ( error ) console.log ( error.reason ); //info about what went wrong
    if ( _id ) {
      Meteor.call('insertColumn',_id,-1,'right');
      Meteor.call('insertColumn',_id,0,'right');
      //Meteor.call('insertColumn',_id,1,'right'); //trying out just inserting two columns on new walls with default width of 6
    }
  });
}

var addDefaultWalls = function(activityID) {
  //if (Meteor.isSimulation)
  //  return;
  check(activityID,Match.idString);
  var wallsCreated = 0;
  var activity = Activities.findOne(activityID);
  //if activity doesn't exist, just don't create walls for it
  //but don't throw error ... see if this is OK
  if (!activity)
    return;
    //throw new Meteor.Error('activityNotFound','Cannot create default walls.  Activity not found.');

  //teacher wall
  var siteID = Site.findOne()._id;
    var wall = {
      activityID: activityID,
      type: 'teacher',
      access: [siteID],
      createdFor: siteID
    }

    if((Walls.find(wall).count() == 0)) {
      delete wall.access;
      insertWall(wall);
      wallsCreated += 1;
    }  
  //  

  //section walls
  Sections.find().forEach(function(section) {
    wall = {
      activityID: activityID,
      type: 'section',
      createdFor: section._id
    }

    foundEmptyWall = false;
    Walls.find(wall).fetch().forEach(function(w) {
      if (!Blocks.find({wallID:w._id}).count())  { //wall is empty
        if (foundEmptyWall) {
          Walls.remove(w._id)
        } else {
          foundEmptyWall = true;
          var memberIds = Meteor.sectionMemberIds(section._id);
          Columns.update({wallID:w._id},{$set:{access:memberIds}},{multi:true});
          Walls.update(w._id,{$set:{access:memberIds}});

/*          Meteor.call('wallChangeAccess',w._id,Meteor.sectionMemberIds(section._id),'set',function(error,id) {
            if (error)
              throw new Meteor.Error(error);
          });*/
        }
      }
    })

    if((Walls.find(wall).count() == 0)) {
      insertWall(wall);
      wallsCreated += 1;
    }
  });

  //student walls
  Meteor.allStudentIds().forEach(function(studentID) {
    wall = {
      activityID: activityID,
      type: 'student',
      createdFor: studentID
    }

    foundEmptyWall = false;
    Walls.find(wall).fetch().forEach(function(w) {
      if (!Blocks.find({wallID:w._id}).count())  { //wall is empty
        if (foundEmptyWall) {
          Walls.remove(w._id);
        } else {
          foundEmptyWall = true;
        }
      }
    })

    if (Walls.find(wall).count() == 0) {
      insertWall(wall);
      wallsCreated += 1;
    }

    //group walls
    wall = {
      activityID: activityID,
      type: 'group',
      access: {$in:[studentID]}
    }

    var currentGroupID = Meteor.currentGroupId(studentID);
    foundEmptyWall = false;
    Walls.find(wall).fetch().forEach(function(w) {
      if (!Blocks.find({wallID:w._id}).count())  { //wall is empty
        if (foundEmptyWall) {
          Walls.remove(w._id)
        } else {
          foundEmptyWall = true;
          if (currentGroupID) {
            var newGroupMemberIds = Meteor.groupMemberIds('current,final',currentGroupID);
            Columns.update({wallID:w._id},{$set:{access:newGroupMemberIds}},{multi:true});
            Walls.update(w._id,{$set:{createdFor:currentGroupID,access:newGroupMemberIds}});
          }
 /*           Meteor.call('wallChangeGroup',w._id,currentGroupID,function(error,id) {
              if (error)
                throw new Meteor.Error(error);
            });
        }*/
      }
    }
  })

    if ((Walls.find(wall).count() == 0) && (currentGroupID)) { 
      wall.createdFor = currentGroupID; 
      delete wall.access;
      insertWall(wall);
    }
    wallsCreated += 1;
    });

  return wallsCreated;
}


Meteor.startup(function() {
  Activities.find().forEach(function(activity) {
    addDefaultWalls(activity._id);
  })
  Walls.find().forEach(function(wall) {
    var wallIsEmpty = !Blocks.find({wallID:wall._id}).count();
    Walls.update(wall._id,{$set:{wallIsEmpty:wallIsEmpty}});
  })
});
